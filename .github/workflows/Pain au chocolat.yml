name: ArcadeActions

on:
  push:
    branches-ignore:
      - 'ga-ignore-*'
      - 'HEAD'

  pull_request:
    branches-ignore:
      - 'ga-ignore-*'
      - 'HEAD'

env:
  MIRROR_URL: https://github.com/EpitechPromo2028/B-OOP-400-NAN-4-1-arcade-samuel.tesson.git
  GITHUB_URL: git@github.com:EpitechPromo2028/B-OOP-400-NAN-4-1-arcade-samuel.tesson.git

jobs:
  cancel-if-mirror:
    name: Cancel if repository is the mirror
    runs-on: ubuntu-latest
    outputs:
      should_cancel: ${{ steps.check-repo-url.outputs.should_cancel }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: check-repo-url
        name: Check repository URL
        run: |
          REPO_URL=$(git config --get remote.origin.url)

          # Normalize URLs by removing any trailing `.git`
          REPO_URL=${REPO_URL%.git}
          MIRROR_URL=${MIRROR_URL%.git}

          if [ "$REPO_URL" == "$MIRROR_URL" ]; then
            echo "Repository URL matches the mirror URL. Skipping further jobs."
            echo "should_cancel=true" >> "$GITHUB_OUTPUT"
          else
            echo "Repository URL does not match the mirror URL. Proceeding with other jobs."
            echo "should_cancel=false" >> "$GITHUB_OUTPUT"
          fi


  build:
    needs: cancel-if-mirror
    if: needs.cancel-if-mirror.outputs.should_cancel == 'false'
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MinGW",
            os: windows-latest,
            artifact: "windows_mingw.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
          - {
            name: "Ubuntu_Latest_GCC",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
          - {
            name: "macOS Latest Clang",
            os: macos-latest,
            artifact: "macos_clang.7z",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            archiver: "7za a",
            generators: "Ninja"
          }

    steps:
      - uses: actions/checkout@v4

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake
          ninja --version
          cmake --version

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update -y
          sudo apt-get install -y ninja-build g++ p7zip-full cmake
          ninja --version
          cmake --version
          gcc --version
          g++ --version
          which 7z
          which 7zr
          7z | head -n 2

      - name: Install dependencies on macos
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install p7zip cmake ninja
          ninja --version
          cmake --version

      - name: Configure
        shell: bash
        run: |
          mkdir build
          mkdir instdir
          # Only set CXX for Ubuntu
          if [[ "${{ matrix.config.name }}" == "Ubuntu_Latest_GCC" ]]; then
            export CXX=/usr/bin/g++
          fi
          cmake \
            -S . \
            -B . \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -G "${{ matrix.config.generators }}" \
            -DCMAKE_INSTALL_PREFIX:PATH=instdir
      - name: Build
        shell: bash
        run: cmake --build . --config ${{ matrix.config.build_type }}

      - name: Install Strip
        shell: bash
        run: cmake --install . --strip

      - name: Pack
        shell: bash
        working-directory: instdir
        run: |
          ls -laR
          ${{ matrix.config.archiver }} ../${{ matrix.config.artifact }} .
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          path: ./${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}.zip
          asset_content_type: application/zip

  coding-style-C:
    name: Checking coding-style and display it if error
    runs-on: ubuntu-latest
    needs: cancel-if-mirror
    if: needs.cancel-if-mirror.outputs.should_cancel == 'false'
    container: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run coding-style
        run: check.sh $(pwd) $(pwd)

      - name: Create annotation for coding-style errors
        shell: bash
        run: |
          input=$(pwd)/coding-style-reports.log
          while IFS= read -r -a line; do
            fields=($(printf "%s" "$line"|cut -d':' --output-delimiter=' ' -f1-))
            echo "::error title=${fields[2]} coding style error,file=${fields[0]},line=${fields[1]}::${fields[3]}"
          done < $input

      - name: Report banana result
        shell: bash
        run: |
          NB_ERROR=$(cat $(pwd)/coding-style-reports.log | wc -l)
          if [ $NB_ERROR -gt 0 ]; then
            exit 1
          fi
  coding-style-CPP:
    needs: coding-style-C
    name: Checking CPP code with cppcheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install cppcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y cppcheck gcc g++ libtinyxml2-dev
          pip install cpplint

      - name: Run cpplint
        id: cpplint
        run: |
          has_error=0
          while IFS= read -r line; do
            file=$(echo "$line" | awk -F':' '{print $1}')
            line_num=$(echo "$line" | awk -F':' '{print $2}')
            msg=$(echo "$line" | awk -F':' '{print $3}')
            # Extract severity and type from message using regex
            if [[ $msg =~ (.*)\ \[([a-zA-Z0-9_/]+)\]\ \[([0-9]+)\] ]]; then
              description="${BASH_REMATCH[1]}"
              category="${BASH_REMATCH[2]}"
              severity="${BASH_REMATCH[3]}"

              if [[ $severity -ge 4 ]]; then
                echo "::error file=$file,line=$line_num,title=cpplint [$category]::$description"
                has_error=1
              else
                echo "::warning file=$file,line=$line_num,title=cpplint [$category]::$description"
              fi
            fi
          done < <(cpplint --recursive --filter=-legal/copyright,-whitespace/indentation,-readability/todo src/ 2>&1)

          exit $has_error

      - name: Run cppcheck
        id: cppcheck
        run: |
          # Variable pour suivre s'il y a une erreur
          has_error=0
          cppcheck --enable=all --template='{severity}|{file}|{line}|{id}|{message}' . 2>&1 | while IFS='|' read -r severity file line id msg
          do
            # Si pas de ligne spécifiée, GitHub Actions ne doit pas planter
            line=${line:-1}
            case "$severity" in
              error)
                echo "::error file=$file,line=$line,title=$id::$msg"
                has_error=1  # Détecte une erreur
                ;;
              warning)
                echo "::warning file=$file,line=$line,title=$id::$msg"
                ;;
              *)
                echo "::notice severity=$severity file=$file,line=$line,title=$id::$msg"
                ;;
            esac
          done
          # Si une erreur a été trouvée, retourner 1
          exit $has_error

  run-unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install dependencies
        run: sudo apt-get install -y gcovr
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Clean previous coverage data
        run: |
          rm -rf build
          find . -name "*.gcda" -delete
          find . -name "*.gcno" -delete
          rm -f coverage.info
      - name: Run tests
        run: |
          mkdir build
          cd build
          cmake .. -DENABLE_TESTS=ON -DENABLE_COVERAGE=ON
          cmake --build .
          ctest --output-on-failure
          make coverage

  push_to_mirror:
    name: Pushing to good repository
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [run-unit-tests, coding-style-CPP]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Push to mirror repository
        uses: pixta-dev/repository-mirroring-action@v1.1.1
        with:
          target_repo_url: ${{ env.GITHUB_URL }}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
